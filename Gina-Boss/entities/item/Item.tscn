[gd_scene load_steps=9 format=2]

[ext_resource path="res://entities/item/Item.gd" type="Script" id=1]
[ext_resource path="res://assets/gui/label_HP_bg.png" type="Texture" id=2]
[ext_resource path="res://assets/audio/sfx/grab.ogg" type="AudioStream" id=3]
[ext_resource path="res://entities/item/Item.tres" type="DynamicFont" id=4]

[sub_resource type="ShaderMaterial" id=5]

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;
render_mode unshaded;

uniform int intensity = 50;
uniform float precision : hint_range(0,0.02);
uniform bool flipColors;		//Flip coloring 90 degrees.

//If not using a texture, will blend between these two colors
uniform vec4 outline_color : hint_color;
uniform vec4 outline_color_2 : hint_color;

uniform bool use_outline_uv;	//Use the outline_uv for coloring or not. Recomended not, but sometimes might be good.

uniform bool useTexture;		//Use a texture for the coloring
uniform sampler2D outlineTexture;	//This is the texture that will be used for coloring. Recomended to use a gradient texture, but I guess anything else works.

varying vec2 o;
varying vec2 f;

void vertex()
{
	//Expands the vertexes so we have space to draw the outline if we were on the edge.
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * float(intensity);
	f = VERTEX;
}

void fragment()
{
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
	
	vec4 regular_color = texture(TEXTURE, regular_uv);
	
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.25){
		regular_color = vec4(0.0); 
	}
	
	vec4 color= vec4(1.0,1.0,1.0,1.0);
	vec4 color_final=regular_color;
	color_final *= sin(TIME*2.0) * sin(TIME*2.0) + color/2.0;
	COLOR=color_final;
}
"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/intensity = 200
shader_param/precision = 0.02
shader_param/flipColors = true
shader_param/outline_color = Color( 0.811765, 0.662745, 0.0705882, 1 )
shader_param/outline_color_2 = Color( 0.215686, 0.733333, 0.270588, 1 )
shader_param/use_outline_uv = true
shader_param/useTexture = false

[sub_resource type="CapsuleShape2D" id=1]
radius = 16.9197
height = 11.9145

[node name="Item" type="Node2D"]
material = SubResource( 5 )
script = ExtResource( 1 )

[node name="Body" type="Sprite" parent="."]
material = SubResource( 3 )

[node name="DetectionArea" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 2

[node name="CollisionShape2D" type="CollisionShape2D" parent="DetectionArea"]
shape = SubResource( 1 )

[node name="ItemQuantityBackground" type="NinePatchRect" parent="."]
anchor_left = 1.0
anchor_right = 1.0
margin_left = 7.96117
margin_top = -30.1062
margin_right = 30.9612
margin_bottom = -8.10622
texture = ExtResource( 2 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ItemQuantity" type="Label" parent="ItemQuantityBackground"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -11.5
margin_top = -10.5
margin_right = 11.5
margin_bottom = 10.5
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="SFX" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource( 3 )
bus = "Sfx"

[node name="Pickup" type="Node2D" parent="."]
position = Vector2( 0.19241, -61.5201 )
z_index = 2
z_as_relative = false
__meta__ = {
"_edit_group_": true
}

[node name="PickupTween" type="Tween" parent="Pickup"]

[node name="PickupLabel" type="Label" parent="Pickup"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -20.0
margin_top = -7.0
margin_right = 20.0
margin_bottom = 7.0
grow_horizontal = 2
size_flags_horizontal = 2
size_flags_vertical = 2
custom_fonts/font = ExtResource( 4 )
text = "10"
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[connection signal="body_entered" from="DetectionArea" to="." method="_on_DetectionArea_body_entered"]
