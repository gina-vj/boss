[gd_scene load_steps=8 format=2]

[ext_resource path="res://entities/tutorial/ControlInfo1.gd" type="Script" id=2]

[sub_resource type="Shader" id=11]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/teleport-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float progress : hint_range(0.0, 1.0);
uniform float noise_desnity = 60;
uniform float beam_size : hint_range(0.01, 0.15);
uniform vec4 color : hint_color = vec4(0.0, 1.02, 1.2, 1.0);

// We are generating our own noise here. You could experiment with the 
// built in SimplexNoise or your own noise texture for other effects.
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

void fragment()
{
	vec4 tex = texture(TEXTURE, UV);
	
	float noise = noise(UV * noise_desnity) * UV.y;
	
	float d1 = step(progress, noise);
	float d2 = step(progress - beam_size, noise);
	
	vec3 beam = vec3(d2 - d1) * color.rgb;
	
	tex.rgb += beam;
	tex.a *= d2;
	
	COLOR = tex;
}"

[sub_resource type="ShaderMaterial" id=12]
resource_local_to_scene = true
shader = SubResource( 11 )
shader_param/progress = 1.0
shader_param/noise_desnity = 60.0
shader_param/beam_size = 0.15
shader_param/color = Color( 0.839216, 0.894118, 0.901961, 1 )

[sub_resource type="CapsuleShape2D" id=13]
radius = 132.336
height = 0.0

[sub_resource type="Animation" id=15]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("Icon:hframes")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 1 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Icon:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0 ]
}

[sub_resource type="Animation" id=14]
resource_name = "animationIcon"
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Icon:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 1, 2 ]
}

[sub_resource type="Animation" id=16]
resource_name = "animationIconSec"
tracks/0/type = "value"
tracks/0/path = NodePath("Icon:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 2, 3 ]
}

[node name="ControlInfo" type="Node2D"]
script = ExtResource( 2 )

[node name="Icon" type="Sprite" parent="."]
modulate = Color( 1, 1, 1, 0.407843 )
material = SubResource( 12 )
position = Vector2( -6957.6, 9.75909 )

[node name="Area2D" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 2

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
position = Vector2( -6957.24, 12.1592 )
shape = SubResource( 13 )

[node name="TimerOn" type="Timer" parent="."]

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/RESET = SubResource( 15 )
anims/animationIcon = SubResource( 14 )
anims/animationIconSec = SubResource( 16 )

[connection signal="body_entered" from="Area2D" to="." method="_on_Area2D_body_entered"]
[connection signal="timeout" from="TimerOn" to="." method="_on_TimerOn_timeout"]
